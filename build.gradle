import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
	repositories {
		mavenCentral()
		maven {
			name = "gt"
			url = "https://gregtech.overminddl1.com/"
		}
	}
	dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
	}
}

apply plugin: 'forge'
apply plugin: 'idea'

def timversion
def bapversion
def mcversion

version = "0.04_work-in-progress"
group= "ebf.bap"
archivesBaseName = "BAPforTiM"

sourceCompatibility = targetCompatibility = "1.7"
compileJava { sourceCompatibility = targetCompatibility = "1.7" }

ext.configFile = file "build.properties"
configFile.withReader {
	def prop = new Properties()
	prop.load(it)
	project.ext.config = new ConfigSlurper().parse prop
}

version=config.modVersion
bapversion=config.modVersion
mcversion="1.7.10-10.13.4.1614-1.7.10"
timversion ="2.4 alpha"+getDate() // This `getDate` is breaking reproducible builds as every build won't match the prior hash, should use the git commit ID instead, this is bad bad bad!
group="train" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "Traincraft Modern"

static def getDate() {
	return new Date().format('yyyy-MM-dd-HH:mm')
}


minecraft {
	version = mcversion
	runDir = "run"
	replace "@VERSION1@", bapversion
	replaceIn "Info.java"
}

processResources
{
	// this will ensure that this task is redone when the versions change.
	inputs.property "version", bapversion
	inputs.property "mcversion", mcversion
	inputs.property "timversion", timversion
	inputs.property "bapversion", bapversion

	// replace stuff in mcmod.info, nothing else
	from(sourceSets.main.resources.srcDirs) {
		include 'mcmod.info'

		// replace version and mcversion
		expand 'version':bapversion, 'mcversion':project.minecraft.version, 'timversion':timversion, 'bapversion':bapversion
	}

	// copy everything else, thats not the mcmod.info
	from(sourceSets.main.resources.srcDirs) {
		exclude 'mcmod.info'
	}
}

repositories {
	maven {
		name "gt"
		url "https://gregtech.overminddl1.com/"
	}
}

dependencies {
	// `compile` will compile it and run with `runClient`/`runServer`, `compileOnly will only compile but not load in dev testing (can still put in the instance mods directory though)
	//compileOnly "com.mod-buildcraft:buildcraft:7.1.23:dev"
	compile "codechicken:CodeChickenLib:1.7.10-1.1.3.140:dev"
	compile "codechicken:CodeChickenCore:1.7.10-1.0.7.47:dev"
	compile "codechicken:NotEnoughItems:1.7.10-1.0.5.120:dev"
	compile fileTree(dir: 'libs', include: ['*.jar'])
    //compile project(':Traincraft')
}


idea
{
	module
	{
		inheritOutputDirs = true
	}
}

task sourceJar(type: Jar) {
	manifest {}
	classifier = 'sources'
	from sourceSets.main.allSource
	exclude 'assets/**'
}

task devJar(type: Jar) {
	manifest {}
	classifier = 'dev'
	from sourceSets.main.output
}

artifacts {
	archives devJar, sourceJar
}

if (!hasProperty("mavenUsername")) {
	ext.mavenUsername="${System.getenv().MAVEN_USERNAME}"
}

if (!hasProperty("mavenPassword")) {
	ext.mavenPassword="${System.getenv().MAVEN_PASSWORD}"
}

if (!hasProperty("mavenURL")) {
	ext.mavenURL="${System.getenv().MAVEN_URL}"
}

uploadArchives {
	repositories {
		mavenDeployer {
			uniqueVersion = false
			repository(url: mavenURL) {
				authentication(userName: mavenUsername, password: mavenPassword)
			}
		}
	}
}

